import express = require('express')
import fs = require('fs')
import path = require('path')

interface XCssOptions {
    /**Fast mode saves the modified CSS, so it only has to be calculated once. 
    *You have to restart the server if you want tochange the css with fast mode enabled!*/
    fastMode?: boolean,
    /**
     * Logs a lot of additional information for debugging.
     * Not recommended for production code!
     */
    verbose?: boolean
}

const defaultOptions : XCssOptions = {
    fastMode: false,
    verbose: false
}

const xcssCache = {}

/**
 * Just use this function with app.use() in Express
 * @param folders All folders with CSS, that you want to include in your XCSS. 
 * You can also include an array of functions, if you want to generate the paths lazily or 
 * if you want them to change over time.
 * @param options Additional options
 */
const xcss = (folders : string[] | (() => string)[], options : XCssOptions = {}) => (req : express.Request, res : express.Response, next : express.NextFunction) => {
    const ops = {...defaultOptions, ...options}

    const onMobile = /(Android)|(iPhone)/.test(req.headers['user-agent'])

    const isLazy = !!(<(() => string)[]>folders)[0].apply
    if(ops.verbose)
        console.log(`folders ${isLazy ? '' : 'not '}supplied lazily`)


    if(isLazy && ops.fastMode)
        console.error("lazy directory declarations do not work with fast mode! Fast mode has been disabled for this middleware function.")


    if(req.url + onMobile.toString() in xcssCache && ops.fastMode && !isLazy) {
        res.header('Content-Type', 'text/css').send(xcssCache[req.url + onMobile.toString()])
        return
    }

    const file = (/[A-Za-z0-9]+\.css/).exec(req.url)
    if(!file){
        if(ops.verbose)
            console.log(`request ${req.url} is not a css file!`)
        next()
        return
    }
    for(const _f of folders) {
        const f = path.resolve(isLazy ? (_f as () => string)() : _f as string)
        const fullDir = path.join(f, file[0])
        try{
            const content = fs.readFileSync(fullDir).toString()
            const result = parseCSS(content, onMobile)
            xcssCache[req.url + onMobile.toString()] = result
            res.header('Content-Type', 'text/css').send(result)
            if(ops.verbose)
                console.log(`successfully sent ${fullDir} as 'text/css'!`)
            return
        }
        catch{
            if(ops.verbose)
                console.log(`${fullDir} does not exist. This is not necessarily an error!`)
        }
    }
    if(ops.verbose)
        console.log(`${req.url} not found in any supplied directory!`)
    next()
}


const parseCSS = (css : string, mobile : boolean) => {
    const rgxG = /\s*([A-Za-z-]+)\s*:\s*([^+;}\n]+)\s*\+\s*([^+;}\n]+);?/g
    const rgx  = /\s*([A-Za-z-]+)\s*:\s*([^+;}\n]+)\s*\+\s*([^+;}\n]+);?/
    const matches = css.match(rgxG)
    if(matches == undefined)
        return css
    const results = matches.filter(x => x != undefined).map(x => rgx.exec(x))
    return results
        .map(res => {
                if(mobile)    
                    return {
                        str: !(/\s*_\s*/.test(res[3])) ? `\n${res[1]}: ${res[3]};` : '', 
                        res
                    }
                else return {
                        str: !(/\s*_\s*/.test(res[2])) ? `\n${res[1]}: ${res[2]};` : '',
                        res
                    }
                })
            .reduce((acc, {str, res}) => acc.replace(res.input, str), css)
}

export = xcss