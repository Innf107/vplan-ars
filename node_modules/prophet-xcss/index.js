"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var fs = require("fs");
var path = require("path");
var defaultOptions = {
    fastMode: false,
    verbose: false
};
var xcssCache = {};
/**
 * Just use this function with app.use() in Express
 * @param folders All folders with CSS, that you want to include in your XCSS.
 * You can also include an array of functions, if you want to generate the paths lazily or
 * if you want them to change over time.
 * @param options Additional options
 */
var xcss = function (folders, options) {
    if (options === void 0) { options = {}; }
    return function (req, res, next) {
        var ops = __assign({}, defaultOptions, options);
        var onMobile = /(Android)|(iPhone)/.test(req.headers['user-agent']);
        var isLazy = !!folders[0].apply;
        if (isLazy && options.fastMode)
            console.error("lazy directory declarations do not work with fast mode! Fast mode has been disabled for this middleware function.");
        if (req.url + onMobile.toString() in xcssCache && ops.fastMode && !isLazy) {
            res.header('Content-Type', 'text/css').send(xcssCache[req.url + onMobile.toString()]);
            return;
        }
        var file = (/[A-Za-z0-9]+\.css/).exec(req.url);
        if (!file) {
            if (ops.verbose)
                console.log("request " + req.url + " is not a css file!");
            next();
            return;
        }
        for (var _i = 0, folders_1 = folders; _i < folders_1.length; _i++) {
            var _f = folders_1[_i];
            var f = path.resolve(isLazy ? _f() : _f);
            var fullDir = path.join(f, file[0]);
            try {
                var content = fs.readFileSync(fullDir).toString();
                var result = parseCSS(content, onMobile);
                xcssCache[req.url + onMobile.toString()] = result;
                res.header('Content-Type', 'text/css').send(result);
                if (ops.verbose)
                    console.log("successfully sent " + fullDir + " as 'text/css'!");
                return;
            }
            catch (_a) {
                if (ops.verbose)
                    console.log(fullDir + " does not exist. This is not necessarily an error!");
            }
        }
        if (ops.verbose)
            console.log(req.url + " not found in any supplied directory!");
        next();
    };
};
var parseCSS = function (css, mobile) {
    var rgxG = /\s*([A-Za-z-]+)\s*:\s*([^+;}\n]+)\s*\+\s*([^+;}\n]+);?/g;
    var rgx = /\s*([A-Za-z-]+)\s*:\s*([^+;}\n]+)\s*\+\s*([^+;}\n]+);?/;
    var matches = css.match(rgxG);
    if (matches == undefined)
        return css;
    var results = matches.filter(function (x) { return x != undefined; }).map(function (x) { return rgx.exec(x); });
    return results
        .map(function (res) {
        if (mobile)
            return {
                str: !(/\s*_\s*/.test(res[3])) ? "\n" + res[1] + ": " + res[3] + ";" : '',
                res: res
            };
        else
            return {
                str: !(/\s*_\s*/.test(res[2])) ? "\n" + res[1] + ": " + res[2] + ";" : '',
                res: res
            };
    })
        .reduce(function (acc, _a) {
        var str = _a.str, res = _a.res;
        return acc.replace(res.input, str);
    }, css);
};
module.exports = xcss;
